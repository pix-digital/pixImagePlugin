<?php

/**
 * PluginPixImageTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginPixImageTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object PluginPixImageTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PluginPixImage');
    }

    public function getFromId($classname, $id, $formats = null, $occurence = null)
    {
        $q = Doctrine_Query::Create()->from('PixImage i INDEXBY i.id')
            ->where('i.classname = ? AND i.object_id = ?', array($classname, $id));

        if (!is_null($occurence)) {
            $q->addWhere('i.occurence = ?', $occurence);
        }

        return $this->getFromQuery($q, $formats);
    }

    /**
     * return the picture from an object and the $formats if provided
     *
     * @param Object $object
     * @param array $types
     * @return array
     */
    public function getFromObject($object, $formats = null, $occurence = null)
    {
        $q = Doctrine_Query::Create()->from('PixImage i INDEXBY i.id')
            ->addWhere('i.classname = ? AND i.object_id = ?', array(get_class($object), $object->getId()))
            ->distinct();

        if (!is_null($occurence)) {
            $q->addWhere('i.occurence = ?', $occurence);
        }

        $q->orderBy('i.occurence asc');

        return $this->getFromQuery($q, $formats);
    }

    public function getFromIdx($classname, $idx, $formats = null)
    {
        $q = Doctrine_Query::Create()->from('PixImage i')
            ->addWhere('i.classname = ?', $classname)
            ->whereIn('i.object_id', $idx);

        $collection = $this->getFromQuery($q, $formats);

        $images = array();
        foreach ($collection as $image) {
            $images[$image->getObjectId()][$image->getType()] = $image;
        }

        return $images;
    }

    public function getFromQuery(Doctrine_Query $q, $formats)
    {
        if (is_array($formats)) {
            $q->whereIn('i.type', $formats);
        }

        return $q->execute();
    }

    public function getLastForObject($object)
    {
        $q = Doctrine_Query::Create()->from('PixImage i')
            ->addWhere('i.classname = ? AND i.object_id = ? AND i.type = ?', array(get_class($object), $object->getId(), 'reference'))
            ->orderBy('i.occurence desc');

        return $q->fetchOne();
    }

    public function getFirstForObject($object)
    {
        $q = Doctrine_Query::Create()->from('PixImage i')
            ->addWhere('i.classname = ? AND i.object_id = ? AND i.type = ?', array(get_class($object), $object->getId(), 'reference'))
            ->orderBy('i.occurence asc');

        return $q->fetchOne();
    }

    public function updateFormats($image)
    {


        if (!$image->exists()) {

            return false;
        }

        $object = $image->getObject();
        if (!$object) {

            return false;
        }
        $config_name = strtolower(get_class($object));
        $config_formats = $object->getConfig($config_name);


        $object_formats = $image->getRelatedFormats();

        $generate = false;
        foreach ($object_formats as $image_format) {
            if ($image_format->getType() == 'reference') {
                continue;
            }

            if (array_key_exists($image_format->getType(), $config_formats)) {
                unset($config_formats[$image_format->getType()]);
                continue;
            }

            if (!array_key_exists($image_format->getType(), $config_formats)) {
                $image_format->delete();
                continue;
            }
        }

        if (count($config_formats) > 0) {
            $this->generateFormats($image);
            return true;
        }

        return false;
    }

    public function generateFormats($image, $customs = array())
    {

        if (!$image->exists()) {
            return false;
        }

        $object = $image->getObject();
        $config_name = strtolower(get_class($object));

        $formats = $object->getConfig($config_name);

        /*$config = sfConfig::get('app_pixImage_config');

        $adapterClass = $config['adapterClass'];
        $adapterOptions = $config['adapterOptions'];

        $base_path = $config['upload_dir'];
        $permissions = $config['permissions'];

        $extension = $image->getExtension();
        $id = $image->getId();    */

        $images_formats = array();
        $_images_formats = $image->getRelatedFormats();

        foreach ($_images_formats as $image_format) {
            $images_formats[$image_format->getType()] = $image_format;
        }

        // init folders
        $image->initFolders();
        $reference_path = $image->getFullPath();

        foreach ($formats as $name => $options) {
            if (array_key_exists($name, $images_formats) && $images_formats[$name]->occurence == $image->occurence) {
                $image_format = $images_formats[$name];
            } else {
                $image_format = new pixImage;
                $image_format->setType($name);
                $image_format->setIsCustomFormat(false);
                $image_format->setOccurence($image->occurence);
            }

            // help to keep database consistancy
            $filename = $name . '-' . $image->getObject()->getSlug() . '-' . $image->occurence . '.' . $image->getExtension();
            $image_format->setLocation($filename);
            $image_format->setObjectId($image->getObjectId());
            $image_format->setClassname($image->getClassname());

            // final path if the file must be copied
            $final_path = $image_format->getFullPath();

            // Do we have a custom file attached to the current format ?
            if (array_key_exists($name, $customs)) {
                $custom = $customs[$name];

                if ($custom['binary_content'] instanceof sfValidatedFile) {
                    // si le format d'image n'est pas le mÃªme
                    $custom_extension = substr($custom['binary_content']->getExtension(), 1);
                    if ($custom_extension != $image->getExtension()) {
                        $final_path = str_replace($image->getExtension(), $custom_extension, $final_path);
                        $location = $image_format->getLocation();
                        $location = str_replace($image->getExtension(), $custom_extension, $location);
                        $image_format->setLocation($location);
                    }

                    $image_format->setIsCustomFormat(true);
                    // copy the file to the new location
                    $custom['binary_content']->save($final_path);
                } else if (!$custom['use_custom']) {
                    $image_format->setIsCustomFormat(false);
                }
            }

            $image_format->save();

            // it is not a custom update
            if (!$image_format->getIsCustomFormat()) {
                // new method using sfImageTransformPlugin
                $thumb = new sfImage();
                $thumb->load($reference_path);
                $thumb->thumbnail($options['width'], $options['height'], $options['method']);
                $thumb->setQuality($options['quality']);
                $thumb->saveAs($final_path);

            }
        }
    }
}